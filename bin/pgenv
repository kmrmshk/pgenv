#!/usr/bin/env bash
#
# pgenv
#
set -u

HERE="$(cd -P -- "$(dirname -- "${BASH_SOURCE:-$0}")" && pwd -P)"
PGENV_HOME="$(cd -P -- "$HERE"/.. && pwd -P)"

usage() {
  cat<<EOS
usage: $(basename $0) <command> [<args>]

COMMAND:
  install [--g3] [--clean] [--shell] [--global] <version>
      Install PostgreSQL with the specified version.
ã€€uninstall <version>
     Uninstall the specified version.
  version
      Show the version of the installed PostgreSQL.
  shell [--no-exec] <version>
      Switch current context to the specified version.
  global <version>
      Switch global context to the specified version.
  list
      Show installed version list.
  prefix [<version>]
      Show path to the specified version.
  source-prefix [<version>]
      Show path to the source directory of the specified version.
  diff <version1>:<version2>:<file>
      Show diffs of file beween version1 and version2. (diff -u ...). '@' equals the current version.
      ex) --diff 9.5.4:9.6.3:src/backend/parser/analyze.c
  edit <version>:<file>
      Open editor with the specified file.
  grep <version>:<directory>:"<regex>"
      Find and Grep.
  select [--global] [--no-exec]
      Interactively select version in current context. (do exec \$SHELL)
  directories
      Get and show version list from postgresql source repository
  link <version> <source>
     Create a symbolic link <version> to <source> under the version directory.
  help
      Show usage.

ENVIRONMENT VARIABLES:

  LOG_LEVEL
      0:debug, 1:info, 2:warn, 3:error

  CONFIGURE_OPTIONS
      This value is passed to the configure script of PostgreSQL. Default is '--enable-debug --with-libxml'.
      Also you can pass options to configure script, using file 'configure_default_options'.

INSTALL:
   # ~/.bash_profile
   source $PGENV_HOME/profile

Example) Install PostgreSQL Version 9.6.3

  \$ $(basename $0) install --g3 9.6.3
  \$ $(basename $0) set 9.6.3
  \$ psql -V

EOS
}

_datetime() { date +'%Y-%m-%d %H:%M:%S'; }
log_debug() { [ $PGENV_LOG_LEVEL -le 0 ] && print_log "$(_datetime) [DEBUG] $@";  }
log_info()  { [ $PGENV_LOG_LEVEL -le 1 ] && print_log "$(_datetime) [INFO] $@";  }
log_warn()  { [ $PGENV_LOG_LEVEL -le 2 ] && print_log "$(_datetime) [WARN] $@";  } >&2
log_error() { [ $PGENV_LOG_LEVEL -le 3 ] && print_log "$(_datetime) [ERROR] $@"; } >&2
print_log() { echo "$@"; }

abort() {
  echo "$@"
  exit 1
} >&2

pgenv_parse_option() {
  local value="${1:-}"
  echo "$value" | sed -e "s/.*=//"
}

pgenv_validate_option_value() {
  local value="${1:-}"
  if [ "$value" = "" ]; then
    log_error "option is required."
    exit 1
  fi

  if [ ${value:0:1} = "-" ] || [ ${value:0:2} = "--" ]; then
    log_error "invalid option: $value"
    exit 1
  fi
  return 0
}

pgenv_current_version() {
  if [ -L "$PGENV_HOME/$PGENV_CURRENT_CONTEXT_LINK" ]; then
    basename "$(cd -P -- $PGENV_HOME/$PGENV_CURRENT_CONTEXT_LINK && pwd -P)"
  fi
}

pgenv_prefix() {
  local VERSION=${1:-`pgenv_current_version`}
  local VERSION_DIR="$PGENV_HOME/$PGNEV_VERSIONS_DIR/$VERSION"
  if [ ! -z $VERSION ] && [ -e "$VERSION_DIR" ]; then
    echo $VERSION_DIR
  fi
}

pgenv_source_prefix() {
  local VERSION=${1:-`pgenv_current_version`}
  local SOURCE_DIR="$PGENV_HOME/$PGNEV_SOURCE_DIR/postgresql-$VERSION"
  if [ ! -z $VERSION ] && [ -e "$SOURCE_DIR" ]; then
    echo $SOURCE_DIR
  fi
}

pgenv_switch_context() {
  [ $# -eq 0 ] && abort "usage: shell [--no-exec] <version>"
  local no_exec=0
  local version
  for arg in "$@"; do
    case "$arg" in
      --no-exec) no_exec=1 ;;
      *)         version="$arg"; break; ;;
    esac
  done
  [ -z "$version" ] && abort "version is required"

  local VERSION_DIR="$PGNEV_VERSIONS_DIR/$version"
  (
    cd "$PGENV_HOME"
    if [ ! -e "$VERSION_DIR" ]; then
      log_error "version is not found: $version"
      exit 1
    fi
    if [ $no_exec -eq 1 ]; then
      cat<<EOS
Sorry, run the following command:
export PATH="$PGENV_HOME/$VERSION_DIR"/bin:"\$PATH"
EOS
    else
      export PATH="$PGENV_HOME/$VERSION_DIR/bin":"$PATH"
      exec $SHELL
    fi
  )
}

pgenv_switch_global_context() {
  [ $# -eq 0 ] && abort "usage: global <version>"
  local no_exec=0
  local version
  for arg in "$@"; do
    case "$arg" in
      --no-exec) no_exec=1 ;;
      -*)        abort "invalid option: $arg" ;;
      *)         version="$arg"; break; ;;
    esac
  done
  [ -z "$version" ] && abort "version is required"

  local VERSION_DIR="$PGNEV_VERSIONS_DIR/$version"
  (
    cd "$PGENV_HOME"
    if [ ! -e "$VERSION_DIR" ]; then
      log_error "version is not found: $version"
      exit 1
    fi
    log_info "==> create default symbolic link to $version"
    rm -rf "$PGENV_CURRENT_CONTEXT_LINK"
    ln -s "$VERSION_DIR" "$PGENV_CURRENT_CONTEXT_LINK"
    echo "export PATH=\"$PGENV_HOME/$PGENV_CURRENT_CONTEXT_LINK/bin\":\"\$PATH\"" > "$PGENV_HOME/$PGENV_PROFILE"
  )
}

pgenv_pg_installed_version() {
  local CURRENT_VERSION=`pgenv_current_version`
  echo "Installed Versions ( * is current context ):"
  for ver in $(ls "$PGENV_HOME/$PGNEV_VERSIONS_DIR/" 2> /dev/null | sort); do
    if [ "$ver" = "$CURRENT_VERSION" ]; then
      echo " * $ver"
    else
      echo "   $ver"
    fi
  done
}

pgenv_pg_version() {
  echo "Global Context : `pgenv_prefix`"
  echo "Current Context: `psql -V`"
}

pgenv_install_pg() {
  [ $# -eq 0 ] && abort "usage: install [--g3] [--clean] [--shell] [--global] <version>"

  local version=
  local g3=0 remove_work=0 set_current_context=0 set_global_context=0
  for arg in "$@"; do
    case "$arg" in
      --g3)      g3=1 ;;
      --clean)   remove_work=1 ;;
      --shell)   set_current_context=1 ;;
      --global)  set_global_context=1  ;;
      -*)        abort "invalid option: $arg" ;;
      *)         version="$arg"; break; ;;
    esac
  done

  local SOURCE_URL="$(printf "$POSTGRESQL_REPOSITORY" "$version" "$version")"
  local SOURCE_FILE="$(basename $SOURCE_URL)"
  local UNARCHIVED_SOURCE_DIR="$PGENV_HOME/$PGNEV_SOURCE_DIR/${SOURCE_FILE%.tar.gz}"
  local VERSION_DIR="$PGENV_HOME/$PGNEV_VERSIONS_DIR/$version"

  mkdir -p "$PGENV_HOME/$PGNEV_SOURCE_DIR" "$PGENV_HOME/$PGNEV_VERSIONS_DIR"

  if [ $remove_work -eq 1 ]; then
    rm -rf "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" "$UNARCHIVED_SOURCE_DIR"
  fi

  # Download a tar ball
  if [ ! -f "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" ]; then
    log_info "==> download from $SOURCE_URL"
    curl -f -o "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" "$SOURCE_URL"
    if [ $? -ne 0 ]; then
      log_error "failed to download source, so exit."
      exit 1
    fi
  fi

  if [ ! -f "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" ]; then
    log_error "may be failed to download source, so exit."
    exit 1
  fi

  # Expand a tar ball
  if [ ! -d "$UNARCHIVED_SOURCE_DIR" ]; then
    (cd "$PGENV_HOME/$PGNEV_SOURCE_DIR"; tar xzf "$SOURCE_FILE")
    if [ $? -ne 0 ]; then
      log_error "failed to unarchive '$PGENV_HOME/$PGNEV_SOURCE_DIR/${SOURCE_FILE}'"
      exit 1
    fi
  fi

  # Install PostgreSQL
  (
    cd "$UNARCHIVED_SOURCE_DIR"
    log_info "==> make clean"
    make clean > "$PGENV_HOME/$PGENV_PG_INSTALL_LOG" 2>&1

    local CONFIGURE_OPTIONS=
    local CONFIGURE_OPTIONS_FILE="$PGENV_HOME/$PGENV_PG_CONFIGURE_DEFAULT_OPTIONS"
    if [ -f "$PGENV_HOME/${PGENV_PG_CONFIGURE_DEFAULT_OPTIONS}-${version}" ]; then
      CONFIGURE_OPTIONS_FILE="$PGENV_HOME/${PGENV_PG_CONFIGURE_DEFAULT_OPTIONS}-${OPT_INSTALL_VERSION}"
    fi
    if [ -f "$CONFIGURE_OPTIONS_FILE" ]; then
      while read line; do
	test "$line" = "" && continue
	test "${line:0:1}" = "#" && continue
	CONFIGURE_OPTIONS="$line $CONFIGURE_OPTIONS"
      done < "$CONFIGURE_OPTIONS_FILE"
    fi
    if [ ! -z $POSTGRESQL_CONFIGURE_OPTION ]; then
      CONFIGURE_OPTIONS="${POSTGRESQL_CONFIGURE_OPTION}"
    fi
    CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS --prefix=$PGENV_HOME/versions/$version"

    log_info "==> configure"
    log_info "$CONFIGURE_OPTIONS"
    sh configure ${CONFIGURE_OPTIONS} > "$PGENV_HOME/$PGENV_PG_INSTALL_LOG" 2>&1
    if [ $? -ne 0 ]; then
      log_error "failed to configure"
      exit 1
    else
      log_info "ok"
    fi

    if [ $g3 -eq 1 ]; then
      log_info "install with CFLAGS '-g3'"
      sed -i -e 's/ -g -02/ -g3/' "$UNARCHIVED_SOURCE_DIR/src/Makefile.global"
    fi

    log_info "==> make install"
    make install > "$PGENV_HOME/$PGENV_PG_INSTALL_LOG" 2>&1
    if [ $? -ne 0 ]; then
      log_error "failed to make"
      exit 1
    else
      log_info "ok"
    fi

    if [ $remove_work -eq 1 ]; then
      log_info "==> remove temporary resources"
      rm -rf "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" "$UNARCHIVED_SOURCE_DIR"
    fi
  )

  if [ $set_current_context -eq 1 ]; then
    pgenv_switch_context "$version"
  fi

  if [ $set_global_context -eq 1 ]; then
    pgenv_switch_global_context "$version"
  fi
}


pgenv_uninstall() {
  [ $# -eq 0 ] && abort "usage: uninstall <version>"
  local version
  for arg in "$@"; do
    case "$arg" in
      *)         version="$arg"; break; ;;
    esac
  done
  [ -z "$version" ] && abort "version is required"

  local VERSION_DIR="$PGNEV_VERSIONS_DIR/${version}"
  if [ ! -e "$PGENV_HOME/$VERSION_DIR" ]; then
    log_warn "version is not found: $OPT_UNINSTALL_VERSION"
    exit 1
  fi
  log_info "==> uninstall $version"
  rm -rf "$PGENV_HOME/$VERSION_DIR"
}

pgenv_diff() {
  [ $# -eq 0 ] && abort "usage: diff <version1>:<version2>:<file>"

  local OLD_VER="$(echo $1 | awk -F: '{print $1}')"
  local NEW_VER="$(echo $1 | awk -F: '{print $2}')"
  local FILEPATH="$(echo $1 | awk -F: '{print $3}')"
  local DIFF_COMMAND="diff -u"
  if [[ -x `which colordiff` ]]; then
    DIFF_COMMAND="colordiff -u"
  fi

  test "$OLD_VER" = "@" && OLD_VER=`pgenv_current_version`
  test "$NEW_VER" = "@" && NEW_VER=`pgenv_current_version`

  if [ -z $OLD_VER ] || [ -z $NEW_VER ] || [ -z "$FILEPATH" ]; then
    log_error "invalid arguments: $1"
    exit 1
  fi

  local OLD_FILE=
  local NEW_FILE=
  if [ "${FILEPATH:0:1}" = "/" ]; then
    OLD_FILE="$FILEPATH"
    NEW_FILE="$FILEPATH"
  else
    OLD_FILE="$(pgenv_source_prefix $OLD_VER)/$FILEPATH"
    NEW_FILE="$(pgenv_source_prefix $NEW_VER)/$FILEPATH"
  fi

  if [ -f "$OLD_FILE" ] && [ -f "$NEW_FILE" ]; then
    log_info "==> $DIFF_COMMAND \"$OLD_FILE\" \"$NEW_FILE\""
    $DIFF_COMMAND "$OLD_FILE" "$NEW_FILE"
  else
    log_warn "file not found: $OLD_FILE , $NEW_FILE "
    exit 1
  fi
}

pgenv_edit() {
  [ $# -eq 0 ] && abort "usage: edit <version>:<file>"

  local VERSION="$(echo $1 | awk -F: '{print $1}')"
  local FILEPATH="$(echo $1 | awk -F: '{print $2}')"
  local EDITOR_COMMAND="${EDITOR:-emacs}"

  test "$VERSION" = "@" && VERSION=`pgenv_current_version`

  if [ -z $VERSION ] || [ -z "$FILEPATH" ]; then
    log_error "invalid arguments: $1"
    exit 1
  fi

  local EDIT_FILE=
  if [ "${FILEPATH:0:1}" = "/" ]; then
    EDIT_FILE="$FILEPATH"
  else
    EDIT_FILE="$(pgenv_source_prefix $VERSION)/$FILEPATH"
  fi

  if [ -f "$EDIT_FILE" ] || [ -L "$EDIT_FILE" ]; then
    $EDITOR_COMMAND "$EDIT_FILE"
  else
    log_warn "file not found: $EDIT_FILE"
    exit 1
  fi
}

pgenv_find_grep() {
  [ $# -eq 0 ] && abort "usage: grep <version>:<directory>:'<regex>'"

  local VERSION="$(echo $1 | awk -F: '{print $1}')"
  local DIRECTORY="$(echo $1 | awk -F: '{print $2}')"
  local REGEXP="$(echo $1 | awk -F: '{print $3}')"

  test "$VERSION" = "@" && VERSION=`pgenv_current_version`
  test "$DIRECTORY" = "@" && VERSION=`pgenv_current_version`

  if [ -z $VERSION ] || [ -z "$DIRECTORY" ] || [ -z "$REGEXP" ]; then
    log_error "invalid arguments: $1"
    exit 1
  fi

  local FIND_DIRECTORY=
  if [ "${FILEPATH:0:1}" = "/" ]; then
    FIND_DIRECTORY="$DIRECTORY"
  else
    FIND_DIRECTORY="$(pgenv_source_prefix $VERSION)/$DIRECTORY"
  fi

  if [ ! -e "$FIND_DIRECTORY" ]; then
    log_warn "directory not found: $FIND_DIRECTORY"
    exit 1
  fi
  find $FIND_DIRECTORY -type f -print0 | xargs -0 grep -I -e "$REGEXP"
}

pgenv_select_version() {
  local global_context=0 no_exec=
  for arg in "$@"; do
    case "$arg" in
      --no-exec) no_exec="$arg" ;;
      --global)  global_context=1 ;;
      -*)        abort "invalid option: $arg" ;;
      *)         break; ;;
    esac
  done

  local VERSIONS_DIR="$PGENV_HOME"/"$PGNEV_VERSIONS_DIR"
  local SELECTED_VERSION=
  echo "Current Version: `pgenv_current_version`"
  PS3="Which version do you select ? (quit:q) > "
  select SELECTED_VERSION in $(ls "$VERSIONS_DIR" | sort);
  do
    if [ "${REPLY}" = "q" ] || [ "${REPLY}" = "quit" ]; then
        exit 0
    fi

    if [ -z "$SELECTED_VERSION" ]; then
      continue
    fi

    case $SELECTED_VERSION in
      *)
        if [ $global_context -eq 1 ]; then
          pgenv_switch_global_context $no_exec "$SELECTED_VERSION"
        else
          pgenv_switch_context $no_exec "$SELECTED_VERSION"
        fi
        exit
        ;;
    esac
  done
}

pgenv_get_version_list() {
  local PG_DIRECTORIES_FILE="$PGENV_HOME/$PGENV_PG_DIRECTORIES"
  local SHOULD_REFRESH=0
  local RET=0
  local temp=

  if [ -f "$PG_DIRECTORIES_FILE" ] && [ -s "$PG_DIRECTORIES_FILE" ]; then
    if [ $(find "$PG_DIRECTORIES_FILE" -mtime 1 | wc -l) -ne 0 ]; then
      SHOULD_REFRESH=1
    fi
  else
    SHOULD_REFRESH=1
  fi

  if [ $SHOULD_REFRESH -eq 1 ]; then
    log_info "==> get version list from $POSTGRESQL_REPOSITORY_DIRECTORIES"
    temp="$(curl -s -f $POSTGRESQL_REPOSITORY_DIRECTORIES)"
    RET=$?
    if [ $RET -ne 0 ]; then
      log_error "failed to download. status=$RET"
      exit 1
    fi
    printf "%s" "$temp"| grep -e 'v[[:digit:]][^"/<>]*' -o | sort | uniq > "$PGENV_HOME/$PGENV_PG_DIRECTORIES"
  fi

  cat "$PGENV_HOME/$PGENV_PG_DIRECTORIES" | sed -e 's/^v//' | sort -n
}

pgenv_link() {
  [ $# -lt 2 ] && log_error "--link <version> <source>" && exit 1
  local DEST="$1"
  local SOURCE="$2"
  local VERSION_DIR="$PGENV_HOME/$PGNEV_VERSIONS_DIR"
  (cd "$VERSION_DIR" && ln -s "$SOURCE" "$DEST")
}

# Required options.
if [ $# -eq 0 ]; then
  usage && exit
fi

### Variables ###

# PostgreSQL Repository URL
POSTGRESQL_REPOSITORY="https://ftp.postgresql.org/pub/source/v%s/postgresql-%s.tar.gz"
POSTGRESQL_REPOSITORY_DIRECTORIES="https://www.postgresql.org/ftp/source/"

# Log level
PGENV_LOG_LEVEL=${LOG_LEVEL:-1}

# The directory saves downloaded source archives.
PGNEV_SOURCE_DIR=src
PGNEV_VERSIONS_DIR=versions
PGENV_CURRENT_CONTEXT_LINK=default
PGENV_PROFILE=profile
PGENV_PG_INSTALL_LOG=install.log
PGENV_PG_CONFIGURE_DEFAULT_OPTIONS=configure_default_options
PGENV_PG_DIRECTORIES=postgresql_directories

# The configure options passed to the configure script.
POSTGRESQL_CONFIGURE_OPTION="${CONFIGURE_OPTIONS:-}"

################

[ $# -eq 0 ] && usage && exit 1

PGENV_COMMAND=

case "$1" in
  "install")
    PGENV_COMMAND="pgenv_install_pg"
    ;;
  "uninstall"|"remove")
    PGENV_COMMAND="pgenv_uninstall"
    ;;
  "shell")
    PGENV_COMMAND="pgenv_switch_context"
    ;;
  "global")
    PGENV_COMMAND="pgenv_switch_global_context"
    ;;
  "list")
    PGENV_COMMAND="pgenv_pg_installed_version"
    ;;
  "version")
    PGENV_COMMAND="pgenv_pg_version"
    ;;
  "prefix")
    PGENV_COMMAND="pgenv_prefix"
    ;;
  "source-prefix")
    PGENV_COMMAND="pgenv_source_prefix"
    ;;
  "diff")
    PGENV_COMMAND="pgenv_diff"
    ;;
  "edit")
    PGENV_COMMAND="pgenv_edit"
    ;;
  "grep")
    PGENV_COMMAND="pgenv_grep"
    ;;
  "select")
    PGENV_COMMAND="pgenv_select_version"
    ;;
  "directories")
    PGENV_COMMAND="pgenv_get_version_list"
    ;;
  "link")
    PGENV_COMMAND="pgenv_link"
    ;;
  "help")
    usage && exit
    ;;
  -*)
    echo "invalid option: $1" && exit 1
    ;;
  *)
    break
    ;;
esac
shift

[ -z "$PGENV_COMMAND" ] && usage && exit 1
"$PGENV_COMMAND" "$@"
