#!/usr/bin/env bash
#
# pgenv
#
set -eu


HERE="$(cd -P -- "$(dirname -- "${BASH_SOURCE:-$0}")" && pwd -P)"
PGENV_HOME="$(cd -P -- "$HERE"/.. && pwd -P)"

pgenv_help() {
  cat<<EOS
usage: $(basename $0) <command> [<args>]

COMMAND:
  install [--g3] [--clean] [--shell] [--global] <version>
      Install PostgreSQL with the specified version.
ã€€uninstall <version>
     Uninstall the specified version.
  version
      Show the version of the installed PostgreSQL.
  shell [--no-exec] <version>
      Switch current context to the specified version.
  global <version>
      Switch global context to the specified version.
  list
      Show installed version list.
  prefix [<version>]
      Show path to the specified version.
  source-prefix [<version>]
      Show path to the source directory of the specified version.
  diff <version1>:<version2>:<file>
      Show diffs of file beween version1 and version2. (diff -u ...). '@' equals the current version.
      ex) --diff 9.5.4:9.6.3:src/backend/parser/analyze.c
  edit <version>:<file>
      Open editor with the specified file.
  grep <version>:<directory>:"<regex>"
      Find and Grep.
  select [-g|--global] [--no-exec]
      Interactively select version in current context. (do exec \$SHELL)
  directories
      Get and show version list from postgresql source repository
  link <version> <source>
     Create a symbolic link <version> to <source> under the version directory.
  help
      Show usage.

COMMAND FOR CLUSTER:
  setup-cluster [--datadir] <synchronous standby number>:<ansynchronous standby number>
     Create a cluster.
  stop-cluster [--node <node>[,<node>...]>] <datadir>
     Stop a cluster.
  remove-cluster <datadir>
     Remove a cluster.

ENVIRONMENT VARIABLES:

  LOG_LEVEL
      0:debug, 1:info, 2:warn, 3:error

  CONFIGURE_OPTIONS
      This value is passed to the configure script of PostgreSQL. Default is '--enable-debug --with-libxml'.
      Also you can pass options to configure script, using file 'configure_default_options'.

INSTALL:
   # ~/.bash_profile
   source $PGENV_HOME/profile

Example) Install PostgreSQL Version 9.6.3 and set the global context to 9.6.3.

  \$ $(basename $0) install --g3 9.6.3
  \$ $(basename $0) global 9.6.3
  \$ psql -V

EOS
}

_datetime() { date +'%Y-%m-%d %H:%M:%S'; }
log_debug() { [ $PGENV_LOG_LEVEL -le 0 ] && print_log "$(_datetime) [DEBUG] $@";  }
log_info()  { [ $PGENV_LOG_LEVEL -le 1 ] && print_log "$(_datetime) [INFO] $@";  }
log_warn()  { [ $PGENV_LOG_LEVEL -le 2 ] && print_log "$(_datetime) [WARN] $@";  } >&2
log_error() { [ $PGENV_LOG_LEVEL -le 3 ] && print_log "$(_datetime) [ERROR] $@"; } >&2
print_log() { printf "%b\n" "$@"; }

abort() {
  if [ $# -ne 0 ]; then
    echo "$@"
  else
    cat -
  fi
  exit 1
} >&2

step() {
  local prefix="$1"
  local begin_num="$2"
  local step_count="$3"
  local step="${4:-1}"
  [ $step_count -eq 0 ] && return
  eval echo ${prefix}{$begin_num..$((begin_num + step_count - 1))..$step}
}

resolve_link() {
  local filepath="$1"
  local filename
  (
    while [ "$filepath" != "" ]; do
      cd "$(dirname "$filepath")"
      filename="$(basename "$filepath")"
      filepath="$(readlink "$filename" ||:)"
    done
    echo "$(pwd -P)/$filename"
  )
}

abs_dirname() {
  echo "$(cd -P -- $(dirname -- "$1") && pwd -P)"
}

pgenv_parse_option() {
  local value="${1:-}"
  echo "$value" | sed -e "s/.*=//"
}

pgenv_validate_option_value() {
  local value="${1:-}"
  if [ "$value" = "" ]; then
    log_error "option is required."
    exit 1
  fi

  if [ ${value:0:1} = "-" ] || [ ${value:0:2} = "--" ]; then
    log_error "invalid option: $value"
    exit 1
  fi
  return 0
}

pgenv_current() {
  if [ -L "$PGENV_HOME/$PGENV_CURRENT_CONTEXT_LINK" ]; then
    basename "$(cd -P -- "$PGENV_HOME/$PGENV_CURRENT_CONTEXT_LINK" && pwd -P)"
  fi
}

pgenv_prefix() {
  local VERSION=${1:-`pgenv_current`}
  local VERSION_DIR="$PGENV_HOME/$PGNEV_VERSIONS_DIR/$VERSION"
  if [ ! -z $VERSION ] && [ -e "$VERSION_DIR" ]; then
    echo $VERSION_DIR
  fi
}

pgenv_source_prefix() {
  local VERSION=${1:-`pgenv_current`}
  local SOURCE_DIR="$PGENV_HOME/$PGNEV_SOURCE_DIR/postgresql-$VERSION"
  if [ ! -z $VERSION ] && [ -e "$SOURCE_DIR" ]; then
    echo $SOURCE_DIR
  fi
}

pgenv_shell() {
  [ $# -eq 0 ] && abort "usage: shell [--no-exec] <version>"
  local no_exec=0
  local version
  for arg in "$@"; do
    case "$arg" in
      --no-exec) no_exec=1 ;;
      *)         version="$arg"; break; ;;
    esac
  done
  [ -z "$version" ] && abort "version is required"

  local VERSION_DIR="$PGNEV_VERSIONS_DIR/$version"
  (
    cd "$PGENV_HOME"
    if [ ! -e "$VERSION_DIR" ]; then
      log_error "version is not found: $version"
      exit 1
    fi
    if [ $no_exec -eq 1 ]; then
      cat<<EOS
Sorry, run the following command:
export PATH="$PGENV_HOME/$VERSION_DIR"/bin:"\$PATH"
EOS
    else
      export PATH="$PGENV_HOME/$VERSION_DIR/bin":"$PATH"
      exec $SHELL
    fi
  )
}

pgenv_global() {
  [ $# -eq 0 ] && abort "usage: global <version>"
  local no_exec=0
  local version
  for arg in "$@"; do
    case "$arg" in
      --no-exec) no_exec=1 ;;
      -*)        abort "invalid option: $arg" ;;
      *)         version="$arg"; break; ;;
    esac
  done
  [ -z "$version" ] && abort "version is required"

  local VERSION_DIR="$PGNEV_VERSIONS_DIR/$version"
  (
    cd "$PGENV_HOME"
    if [ ! -e "$VERSION_DIR" ]; then
      log_error "version is not found: $version"
      exit 1
    fi
    log_info "==> create default symbolic link to $version"
    rm -rf "$PGENV_CURRENT_CONTEXT_LINK"
    ln -s "$VERSION_DIR" "$PGENV_CURRENT_CONTEXT_LINK"
    echo "export PATH=\"$PGENV_HOME/$PGENV_CURRENT_CONTEXT_LINK/bin:\$PATH\"" > "$PGENV_HOME/$PGENV_PROFILE"
    echo "export POSTGRES_HOME=\"$PGENV_HOME/$PGENV_CURRENT_CONTEXT_LINK\"" >> "$PGENV_HOME/$PGENV_PROFILE"
    echo "export PGLIB=\"\$POSTGRES_HOME/lib\"" >> "$PGENV_HOME/$PGENV_PROFILE"
    echo "export LD_LIBRARY_PATH=\"\$PGLIB:\$LD_LIBRARY_PATH\"" >> "$PGENV_HOME/$PGENV_PROFILE"
  )
}

pgenv_list() {
  local CURRENT_VERSION="`pgenv_current`"
  echo "Installed Versions ( * is current context ):"
  for ver in $(ls "$PGENV_HOME/$PGNEV_VERSIONS_DIR/" 2> /dev/null | sort); do
    if [ "$ver" = "$CURRENT_VERSION" ]; then
      echo " * $ver"
    else
      echo "   $ver"
    fi
  done
}

pgenv_version() {
  echo "Global Context : `pgenv_prefix`"
  $(which psql &> /dev/null) && {
    echo "Current Context: `psql -V`"
  }
}

pgenv_install() {
  [ $# -eq 0 ] && abort "usage: install [--g3] [--clean] [--shell] [--global] <version>"

  local version=
  local g3=0 remove_work=0 set_current_context=0 set_global_context=0
  for arg in "$@"; do
    case "$arg" in
      --g3)      g3=1 ;;
      --clean)   remove_work=1 ;;
      --shell)   set_current_context=1 ;;
      --global)  set_global_context=1  ;;
      -*)        abort "invalid option: $arg" ;;
      *)         version="$arg"; break; ;;
    esac
  done

  local SOURCE_URL="$(printf "$POSTGRESQL_REPOSITORY" "$version" "$version")"
  local SOURCE_FILE="$(basename $SOURCE_URL)"
  local UNARCHIVED_SOURCE_DIR="$PGENV_HOME/$PGNEV_SOURCE_DIR/${SOURCE_FILE%.tar.gz}"
  local VERSION_DIR="$PGENV_HOME/$PGNEV_VERSIONS_DIR/$version"

  mkdir -p "$PGENV_HOME/$PGNEV_SOURCE_DIR" "$PGENV_HOME/$PGNEV_VERSIONS_DIR"

  if [ $remove_work -eq 1 ]; then
    rm -rf "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" "$UNARCHIVED_SOURCE_DIR"
  fi

  # Download a tar ball
  if [ ! -f "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" ]; then
    log_info "==> download from $SOURCE_URL"
    curl -f -o "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" "$SOURCE_URL"
    if [ $? -ne 0 ]; then
      log_error "failed to download source, so exit."
      exit 1
    fi
  fi

  if [ ! -f "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" ]; then
    log_error "may be failed to download source, so exit."
    exit 1
  fi

  # Expand a tar ball
  if [ ! -d "$UNARCHIVED_SOURCE_DIR" ]; then
    (cd "$PGENV_HOME/$PGNEV_SOURCE_DIR"; tar xzf "$SOURCE_FILE")
    if [ $? -ne 0 ]; then
      log_error "failed to unarchive '$PGENV_HOME/$PGNEV_SOURCE_DIR/${SOURCE_FILE}'"
      exit 1
    fi
  fi

  # Install PostgreSQL
  (
    cd "$UNARCHIVED_SOURCE_DIR"
    log_info "==> make clean"
    make clean > "$PGENV_HOME/$PGENV_PG_INSTALL_LOG" 2>&1 ||:

    local CONFIGURE_OPTIONS=
    local CONFIGURE_OPTIONS_FILE="$PGENV_HOME/$PGENV_PG_CONFIGURE_DEFAULT_OPTIONS"
    if [ -f "$PGENV_HOME/${PGENV_PG_CONFIGURE_DEFAULT_OPTIONS}-${version}" ]; then
      CONFIGURE_OPTIONS_FILE="$PGENV_HOME/${PGENV_PG_CONFIGURE_DEFAULT_OPTIONS}-${OPT_INSTALL_VERSION}"
    fi
    if [ -f "$CONFIGURE_OPTIONS_FILE" ]; then
      while read line; do
	test "$line" = "" && continue
	test "${line:0:1}" = "#" && continue
	CONFIGURE_OPTIONS="$line $CONFIGURE_OPTIONS"
      done < "$CONFIGURE_OPTIONS_FILE"
    fi
    if [ ! -z $POSTGRESQL_CONFIGURE_OPTION ]; then
      CONFIGURE_OPTIONS="${POSTGRESQL_CONFIGURE_OPTION}"
    fi
    CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS --prefix=$PGENV_HOME/versions/$version"

    log_info "==> configure"
    log_info "$CONFIGURE_OPTIONS"
    sh configure ${CONFIGURE_OPTIONS} > "$PGENV_HOME/$PGENV_PG_INSTALL_LOG" 2>&1
    if [ $? -ne 0 ]; then
      log_error "failed to configure"
      exit 1
    else
      log_info "ok"
    fi

    if [ $g3 -eq 1 ]; then
      log_info "install with CFLAGS '-g3'"
      sed -i -e 's/ -g -02/ -g3/' "$UNARCHIVED_SOURCE_DIR/src/Makefile.global"
    fi

    log_info "==> make install"
    make install > "$PGENV_HOME/$PGENV_PG_INSTALL_LOG" 2>&1
    if [ $? -ne 0 ]; then
      log_error "failed to make"
      exit 1
    else
      log_info "ok"
    fi

    if [ $remove_work -eq 1 ]; then
      log_info "==> remove temporary resources"
      rm -rf "$PGENV_HOME/$PGNEV_SOURCE_DIR/$SOURCE_FILE" "$UNARCHIVED_SOURCE_DIR"
    fi
  )

  if [ $set_current_context -eq 1 ]; then
    pgenv_switch_context "$version"
  fi

  if [ $set_global_context -eq 1 ]; then
    pgenv_switch_global_context "$version"
  fi
}


pgenv_uninstall() {
  [ $# -eq 0 ] && abort "usage: uninstall <version>"
  local version
  for arg in "$@"; do
    case "$arg" in
      *)         version="$arg"; break; ;;
    esac
  done
  [ -z "$version" ] && abort "version is required"

  local VERSION_DIR="$PGNEV_VERSIONS_DIR/${version}"
  if [ ! -e "$PGENV_HOME/$VERSION_DIR" ]; then
    log_warn "version is not found: $OPT_UNINSTALL_VERSION"
    exit 1
  fi
  log_info "==> uninstall $version"
  rm -rf "$PGENV_HOME/$VERSION_DIR"
}

pgenv_diff() {
  [ $# -eq 0 ] && abort "usage: diff <version1>:<version2>:<file>"

  local OLD_VER="$(echo $1 | awk -F: '{print $1}')"
  local NEW_VER="$(echo $1 | awk -F: '{print $2}')"
  local FILEPATH="$(echo $1 | awk -F: '{print $3}')"
  local DIFF_COMMAND="diff -u"
  if [[ -x `which colordiff` ]]; then
    DIFF_COMMAND="colordiff -u"
  fi

  test "$OLD_VER" = "@" && OLD_VER=`pgenv_current_version`
  test "$NEW_VER" = "@" && NEW_VER=`pgenv_current_version`

  if [ -z $OLD_VER ] || [ -z $NEW_VER ] || [ -z "$FILEPATH" ]; then
    log_error "invalid arguments: $1"
    exit 1
  fi

  local OLD_FILE=
  local NEW_FILE=
  if [ "${FILEPATH:0:1}" = "/" ]; then
    OLD_FILE="$FILEPATH"
    NEW_FILE="$FILEPATH"
  else
    OLD_FILE="$(pgenv_source_prefix $OLD_VER)/$FILEPATH"
    NEW_FILE="$(pgenv_source_prefix $NEW_VER)/$FILEPATH"
  fi

  if [ -f "$OLD_FILE" ] && [ -f "$NEW_FILE" ]; then
    log_info "==> $DIFF_COMMAND \"$OLD_FILE\" \"$NEW_FILE\""
    $DIFF_COMMAND "$OLD_FILE" "$NEW_FILE"
  else
    log_warn "file not found: $OLD_FILE , $NEW_FILE "
    exit 1
  fi
}

pgenv_edit() {
  [ $# -eq 0 ] && abort "usage: edit <version>:<file>"

  local VERSION="$(echo $1 | awk -F: '{print $1}')"
  local FILEPATH="$(echo $1 | awk -F: '{print $2}')"
  local EDITOR_COMMAND="${EDITOR:-emacs}"

  test "$VERSION" = "@" && VERSION=`pgenv_current_version`

  if [ -z "$VERSION" ] || [ -z "$FILEPATH" ]; then
    log_error "invalid arguments: $1"
    exit 1
  fi

  local EDIT_FILE=
  if [ "${FILEPATH:0:1}" = "/" ]; then
    EDIT_FILE="$FILEPATH"
  else
    EDIT_FILE="$(pgenv_source_prefix $VERSION)/$FILEPATH"
  fi

  if [ -f "$EDIT_FILE" ] || [ -L "$EDIT_FILE" ]; then
    $EDITOR_COMMAND "$EDIT_FILE"
  else
    log_warn "file not found: $EDIT_FILE"
    exit 1
  fi
}

pgenv_grep() {
  [ $# -eq 0 ] && abort "usage: grep <version>:<directory>:'<regex>'"

  local VERSION="$(echo $1 | awk -F: '{print $1}')"
  local DIRECTORY="$(echo $1 | awk -F: '{print $2}')"
  local REGEXP="$(echo $1 | awk -F: '{print $3}')"

  test "$VERSION" = "@" && VERSION=`pgenv_current_version`
  test "$DIRECTORY" = "@" && VERSION=`pgenv_current_version`

  if [ -z $VERSION ] || [ -z "$DIRECTORY" ] || [ -z "$REGEXP" ]; then
    log_error "invalid arguments: $1"
    exit 1
  fi

  local FIND_DIRECTORY=
  if [ "${DIRECTORY:0:1}" = "/" ]; then
    FIND_DIRECTORY="$DIRECTORY"
  else
    FIND_DIRECTORY="$(pgenv_source_prefix $VERSION)/$DIRECTORY"
  fi

  if [ ! -e "$FIND_DIRECTORY" ]; then
    log_warn "directory not found: $FIND_DIRECTORY"
    exit 1
  fi
  find $FIND_DIRECTORY -type f -print0 | xargs -0 grep -I -e "$REGEXP"
}

pgenv_select() {
  local global_context=0 no_exec=
  for arg in "$@"; do
    case "$arg" in
      --no-exec)    no_exec="$arg" ;;
      -g|--global)  global_context=1 ;;
      -*)           abort "invalid option: $arg" ;;
      *)            break; ;;
    esac
  done

  local VERSIONS_DIR="$PGENV_HOME"/"$PGNEV_VERSIONS_DIR"
  local SELECTED_VERSION=
  echo "Current Version: `pgenv_current`"
  PS3="Which version do you select ? (quit:q) > "
  select SELECTED_VERSION in $(ls "$VERSIONS_DIR" | sort);
  do
    if [ "${REPLY}" = "q" ] || [ "${REPLY}" = "quit" ]; then
        exit 0
    fi

    if [ -z "$SELECTED_VERSION" ]; then
      continue
    fi

    case $SELECTED_VERSION in
      *)
        if [ $global_context -eq 1 ]; then
          pgenv_global $no_exec "$SELECTED_VERSION"
        else
          pgenv_shell $no_exec "$SELECTED_VERSION"
        fi
        exit
        ;;
    esac
  done
}

pgenv_directories() {
  local PG_DIRECTORIES_FILE="$PGENV_HOME/$PGENV_PG_DIRECTORIES"
  local SHOULD_REFRESH=0
  local RET=0
  local temp=

  if [ -f "$PG_DIRECTORIES_FILE" ] && [ -s "$PG_DIRECTORIES_FILE" ]; then
    local updated_directory_file="$(find "$PG_DIRECTORIES_FILE" -mtime +1)"
    if [ -n "$updated_directory_file" ]; then
      SHOULD_REFRESH=1
    fi
  else
    SHOULD_REFRESH=1
  fi

  if [ $SHOULD_REFRESH -eq 1 ]; then
    log_info "==> get version list from $POSTGRESQL_REPOSITORY_DIRECTORIES"
    temp="$(curl -s -f $POSTGRESQL_REPOSITORY_DIRECTORIES)"
    RET=$?
    if [ $RET -ne 0 ]; then
      log_error "failed to download. status=$RET"
      exit 1
    fi
    printf "%s" "$temp"| grep -e 'v[[:digit:]][^"/<>]*' -o | sort | uniq > "$PGENV_HOME/$PGENV_PG_DIRECTORIES"
  fi

  cat "$PGENV_HOME/$PGENV_PG_DIRECTORIES" | sed -e 's/^v//' | sort -n
}

pgenv_link() {
  [ $# -lt 2 ] && log_error "usage: link <version> <source>" && exit 1
  local DEST="$1"
  local SOURCE="$2"
  local VERSION_DIR="$PGENV_HOME/$PGNEV_VERSIONS_DIR"
  (cd "$VERSION_DIR" && ln -s "$SOURCE" "$DEST")
}

pgenv_setup_cluster() {
  [ $# -eq 0 ] && abort "usage: setup-cluster [--datadir <datadir>] [--port <start port>] <synchronous standby number>:<ansynchronous standby number>"
  local DATA_PREFIX=data
  local SERVER_PREFIX=server
  local CLUSTER_FILE=cluster
  local datadir=. start_port=5432
  while [ $# -gt 0 ]; do
    case "$1" in
      --datadir) shift; datadir="$1"       ;;
      --port)    shift; start_port="$1"    ;;
      *)
        break
        ;;
    esac
    shift
  done
  [ $# -eq 0 ] && abort "required <synchronous standby number>:<asynchronous standby number>"
  [ -z "$datadir" ] && abort "datadir is empty"

  local arg="$1"
  local sync_num="$(echo "$arg" | awk -F":" '{print $1}')"
  local async_num="$(echo "$arg" | awk -F":" '{print $2}')"

  if [[ ! $sync_num =~ ^[0-9]+$ ]] || [[ ! $async_num =~ ^[0-9]+$ ]]; then
    abort "invalid argument: $arg"
  fi

  mkdir -p "$datadir"
  datadir="$(abs_dirname "$datadir/x")"
  (
    cd "$datadir"
    log_info "==> initdb for cluster"
    local data_dirname="${DATA_PREFIX}1"
    log_info "$data_dirname"
    if [ -e "${data_dirname}" ]; then
      log_warn "already exists: $data_dirname"
    else
      initdb --encoding=utf8 --no-locale "$data_dirname" >/dev/null 2>&1
      [ $? -ne 0 ] && log_error "failed to do initdb: $data_dirname" | abort
    fi
  )

  local primary_server="${SERVER_PREFIX}1"
  local primary_data="${DATA_PREFIX}1"
  local primary_port="$start_port"
  local synchronous_standby_servers=( $(step "$SERVER_PREFIX" 2 $sync_num) )
  local synchronous_standby_data=( ${synchronous_standby_servers[@]/$SERVER_PREFIX/$DATA_PREFIX} )
  local synchronous_standby_ports=( $(step "" $((start_port + 1)) $sync_num) )
  local standby_servers=( $(step "$SERVER_PREFIX" $((2 + sync_num)) $async_num) )
  local standby_data=( ${standby_servers[@]/$SERVER_PREFIX/$DATA_PREFIX} )
  local standby_ports=( $(step "" $((start_port + 1 + sync_num)) $async_num) )
  local all_servers=($primary_server "${synchronous_standby_servers[@]}" "${standby_servers[@]}")
  local all_data=($primary_data "${synchronous_standby_data[@]}" "${standby_data[@]}")
  local all_ports=($primary_port "${synchronous_standby_ports[@]}" "${standby_ports[@]}")

  [ -f "$datadir/$CLUSTER_FILE" ] && source "$datadir/$CLUSTER_FILE"

  log_info "==> primary server" "${primary_server}/${primary_data}/${primary_port}"
  log_info "==> synchronous standby servers"
  for idx in ${!synchronous_standby_servers[@]}; do
    printf "%s/%s/%d\n" ${synchronous_standby_servers[$idx]} ${synchronous_standby_data[$idx]} ${synchronous_standby_ports[$idx]}
  done
  log_info "==> standby servers"
  for idx in ${!standby_servers[@]}; do
    printf "%s/%s/%d\n" ${standby_servers[$idx]} ${standby_data[$idx]} ${standby_ports[$idx]}
  done

  (
    cd "$datadir"

    # Setup master
    if [ ! -f "$CLUSTER_FILE" ]; then
      cat<<EOS >> "${primary_data}/postgresql.conf"
synchronous_standby_names = '$(echo "${synchronous_standby_servers[@]}" | sed -e "s/ /,/g")'
max_wal_senders = $((2 + sync_num + async_num))
wal_level = hot_standby
archive_mode = off
wal_keep_segments = 8
EOS

      cat <<EOS >> "${primary_data}/pg_hba.conf"
host   replication     $(whoami)             127.0.0.1/32               trust
host   replication     $(whoami)             ::1/128                    trust
EOS
    fi

    log_info "==> start ${primary_server}"
    "$(pgenv prefix)"/bin/pg_ctl start -w -D "$primary_data" -o "-p $primary_port"

    # Setup synchronous standby servers
    for idx in ${!synchronous_standby_servers[@]}; do
      if [ ! -f "$CLUSTER_FILE" ]; then
        log_info "==> ${synchronous_standby_servers[$idx]}: pg_basebackup from $primary_server"
        "$(pgenv prefix)"/bin/pg_basebackup -h localhost -p $primary_port -D ${synchronous_standby_data[$idx]} --xlog --progress --checkpoint=fast
        cat <<EOS >> "${synchronous_standby_data[$idx]}/postgresql.conf"
hot_standby = on
EOS
        cat <<EOS >> "${synchronous_standby_data[$idx]}/recovery.conf"
recovery_target_timeline=latest
primary_conninfo='host=localhost port=${primary_port} application_name=${synchronous_standby_servers[$idx]}'
standby_mode=on
EOS
        cat <<EOS >> "${synchronous_standby_data[$idx]}/pg_hba.conf"
local   replication     $(whoami)                                trust
EOS
      fi
      log_info "==> start ${synchronous_standby_servers[$idx]}"
      "$(pgenv prefix)"/bin/pg_ctl start -w -D "${synchronous_standby_data[$idx]}" -o "-p ${synchronous_standby_ports[$idx]}"
    done

    # Setup standby servers
    for idx in ${!standby_servers[@]}; do
      if [ ! -f "$CLUSTER_FILE" ]; then
        log_info "==> ${standby_servers[$idx]}: pg_basebackup from $primary_server"
        "$(pgenv prefix)"/bin/pg_basebackup -h localhost -p $primary_port -D ${standby_data[$idx]} --xlog --progress --checkpoint=fast

        cat <<EOS >> "${standby_data[$idx]}/postgresql.conf"
hot_standby = on
EOS
        cat <<EOS >> "${standby_data[$idx]}/recovery.conf"
recovery_target_timeline=latest
primary_conninfo='host=localhost port=${primary_port} application_name=${standby_servers[$idx]}'
standby_mode=on
EOS
      fi
      log_info "==> start ${standby_servers[$idx]}"
      "$(pgenv prefix)"/bin/pg_ctl start -w -D "${standby_data[$idx]}" -o "-p ${standby_ports[$idx]}"
    done

    log_info "==> show pg_stat_replication view"
    log_debug "select * from pg_stat_replication"
    psql -p ${primary_port} -x -c "select * from pg_stat_replication" postgres
  )

  log_info "==> save cluster information" "$datadir/$CLUSTER_FILE"
  cat <<EOF > "$datadir"/$CLUSTER_FILE
primary_server="${SERVER_PREFIX}1"
primary_data="${DATA_PREFIX}1"
primary_port="$start_port"
synchronous_standby_servers=( $(step "$SERVER_PREFIX" 2 $sync_num) )
synchronous_standby_data=( ${synchronous_standby_servers[@]/$SERVER_PREFIX/$DATA_PREFIX} )
synchronous_standby_ports=( $(step "" $((start_port + 1)) $sync_num) )
standby_servers=( $(step "$SERVER_PREFIX" $((2 + sync_num)) $async_num) )
standby_data=( ${standby_servers[@]/$SERVER_PREFIX/$DATA_PREFIX} )
standby_ports=( $(step "" $((start_port + 1 + sync_num)) $async_num) )
all_servers=($primary_server ${synchronous_standby_servers[@]} ${standby_servers[@]})
all_data=($primary_data ${synchronous_standby_data[@]} ${standby_data[@]})
all_ports=($primary_port ${synchronous_standby_ports[@]} ${standby_ports[@]})
EOF

  log_info "==> Stop cluster?"
  for idx in ${!all_servers[@]}; do
    echo $(pgenv prefix)/bin/pg_ctl -D "$datadir/${all_data[$idx]}" -w stop
  done
}

pgenv_stop_cluster() {
  [ $# -eq 0 ] && abort "usage: stop-cluster [--node <node>[,<node>...]] <datadir>"
  local datadir=
  local CLUSTER_FILE=cluster
  declare -A stop_nodes
  stop_nodes=()
  while [ $# -gt 0 ]; do
    case "$1" in
      --node)
        shift
        for node in ${1/,/ }; do
          stop_nodes[$node]=1
        done
        ;;
      *)
        break
        ;;
    esac
    shift
  done
  [ $# -eq 0 ] && abort "datadir is empty"
  datadir="$1"
  [ ! -e "$datadir" ] && abort "'$datadir' does not exist"
  (
    cd "$datadir"
    [ ! -f "$CLUSTER_FILE" ] && abort "'$CLUSTER_FILE' is not found in '$datadir'"
    source "$CLUSTER_FILE"
    for idx in $(eval echo {$((${#all_servers[@]} - 1))..0}); do
      local node="${all_servers[$idx]}"
      if [ ${#stop_nodes[@]} -eq 0 ] || [ -n "${stop_nodes[$node]:-}" ]; then
        log_info "==> stop ${all_servers[$idx]}"
        "$(pgenv prefix)"/bin/pg_ctl -D "${all_data[$idx]}" -w stop
      fi
    done
  )
}

pgenv_remove_cluster() {
  local datadir="${1:-.}"
  local CLUSTER_FILE=cluster
  [ ! -e "$datadir" ] && abort "'$datadir' does not exist"
  [ ! -f "$datadir/$CLUSTER_FILE" ] && abort "'$CLUSTER_FILE' is not found in '$datadir'"
  pgenv_stop_cluster "$datadir"
  rm -rf "$datadir"
}

# Required options.
if [ $# -eq 0 ]; then
  pgenv_help && exit
fi

### Variables ###

# PostgreSQL Repository URL
POSTGRESQL_REPOSITORY="https://ftp.postgresql.org/pub/source/v%s/postgresql-%s.tar.gz"
POSTGRESQL_REPOSITORY_DIRECTORIES="https://www.postgresql.org/ftp/source/"

# Log level
PGENV_LOG_LEVEL=${LOG_LEVEL:-1}

# The directory saves downloaded source archives.
PGNEV_SOURCE_DIR=src
PGNEV_VERSIONS_DIR=versions
PGENV_CURRENT_CONTEXT_LINK=default
PGENV_PROFILE=profile
PGENV_PG_INSTALL_LOG=install.log
PGENV_PG_CONFIGURE_DEFAULT_OPTIONS=configure_default_options
PGENV_PG_DIRECTORIES=postgresql_directories

# The configure options passed to the configure script.
POSTGRESQL_CONFIGURE_OPTION="${CONFIGURE_OPTIONS:-}"

################

[ $# -eq 0 ] && pgenv_help && abort

PGENV_COMMAND="pgenv_${1/-/_}"
if ! type -t "$PGENV_COMMAND" > /dev/null 2>&1; then
  abort "invalid command: $PGENV_COMMAND"
fi
shift
"$PGENV_COMMAND" "$@"
